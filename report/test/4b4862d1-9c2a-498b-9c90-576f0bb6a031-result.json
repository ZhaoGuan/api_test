{"name": "test_template[/Users/gz/Desktop/project/MSB_api_test/basics_function/../case/all/myInfoV1.yml-online]", "status": "failed", "statusDetails": {"message": "AssertionError: \n              字典型key不匹配\n  case: dict_keys([])\n  response: dict_keys(['isVip', 'openOrderTimes', 'remainClassNum', 'username', 'mobile'])\n  \nassert False", "trace": "path = '/Users/gz/Desktop/project/MSB_api_test/basics_function/../case/all/myInfoV1.yml', source = 'online'\n\n    @allure.feature(\"接口测试用例\")\n    @pytest.mark.parametrize(\"path,source\", run_data)\n    def test_template(path, source):\n        @allure.story(path.split(\"/\")[-1])\n        def run(path, source):\n            file_path = path\n            try:\n                run_way = config_reader(file_path)['OPERATION_MODE']\n            except Exception as e:\n                print(e)\n                run_way = 'py'\n            if run_way == 'single':\n                result = single_api_tester(path, source)\n                assert False, \"\"\"\n                字典型key不匹配\n    case: dict_keys([])\n    response: dict_keys(['isVip', 'openOrderTimes', 'remainClassNum', 'username', 'mobile'])\n    \"\"\"\n            elif run_way == 'content':\n                result = False\n                assert result\n            else:\n                p = subprocess.Popen('python3 ' + file_path + ' -s ' + source, shell=True, stdout=subprocess.PIPE,\n                                     stderr=subprocess.STDOUT)\n                result = str(p.stdout.read().decode())\n                print(result)\n                if ('失败' in result) or ('AssertionError' in result) or ('Traceback' in result) or ('SyntaxError' in result):\n                    assert False\n    \n>       run(path, source)\n\nbasics_function/test_template.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\npath = '/Users/gz/Desktop/project/MSB_api_test/basics_function/../case/all/myInfoV1.yml', source = 'online'\n\n        @allure.story(path.split(\"/\")[-1])\n        def run(path, source):\n            file_path = path\n            try:\n                run_way = config_reader(file_path)['OPERATION_MODE']\n            except Exception as e:\n                print(e)\n                run_way = 'py'\n            if run_way == 'single':\n                result = single_api_tester(path, source)\n>               assert False, \"\"\"\n                字典型key不匹配\n    case: dict_keys([])\n    response: dict_keys(['isVip', 'openOrderTimes', 'remainClassNum', 'username', 'mobile'])\nE   AssertionError: \nE                 字典型key不匹配\nE     case: dict_keys([])\nE     response: dict_keys(['isVip', 'openOrderTimes', 'remainClassNum', 'username', 'mobile'])\nE     \nE   assert False\n\nbasics_function/test_template.py:33: AssertionError"}, "parameters": [{"name": "path", "value": "'/Users/gz/Desktop/project/MSB_api_test/basics_function/../case/all/myInfoV1.yml'"}, {"name": "source", "value": "'online'"}], "start": 1593846673277, "stop": 1593846673600, "uuid": "d0957788-6bb3-4328-9e56-4e3eb110e9ad", "historyId": "f9fa8756ea3d8c6e4ab536ae3abf9e83", "testCaseId": "dff8546a7874160ea4cf83b302a4fc2a", "fullName": "basics_function.test_template#test_template", "labels": [{"name": "feature", "value": "接口测试用例"}, {"name": "parentSuite", "value": "basics_function"}, {"name": "suite", "value": "test_template"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "82726-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "basics_function.test_template"}]}